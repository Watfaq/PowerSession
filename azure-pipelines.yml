strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.13'
    windows:
      imageName: 'vs2017-win2016'


trigger:
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master

stages:
- stage: Build
  jobs:
  - job: Restore
    pool:
      vmImage: $(imageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(Parameters.RestoreBuildProjects)'
        feedsToUse: config
        nugetConfigPath: PowerSession.Cli/nuget.config

  - job: Build
    pool:
      vmImage: $(imageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(Parameters.RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'

  - job: Test
    pool:
      vmImage: $(imageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '$(Parameters.TestProjects)'
        arguments: '--configuration $(BuildConfiguration)'

  - job: Publish
    pool:
      vmImage: $(imageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(Parameters.RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration) --output $(System.ArtifactsDirectory)/exe/ -r win-x64  /p:PublishSingleFile=true /p:TrimUnusedDependencies=true /p:PublishTrimmed=true'
        zipAfterPublish: false

  - job: PackNuGet
    pool:
      vmImage: $(imageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: PowerSession.Cli/PowerSession.Cli.csproj
        packDirectory: '$(System.ArtifactsDirectory)/nupkg/'
        nobuild: true
        includesymbols: true

  - job: PublishExe
    pool:
      vmImage: $(imageName)
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.ArtifactsDirectory)/exe'
        artifact: exe

  - job: PublishNuGet
    pool:
      vmImage: $(imageName)
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.ArtifactsDirectory)/nupkg'
        artifact: nupkg

- stage: Release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/release'))
  jobs:
  - job: ReleaseGithub
    pool:
      vmImage: $(imageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        artifactName: exe
        targetPath: '$(System.ArtifactsDirectory)'
    - task: GitHubRelease@1
      displayName: 'GitHub release (create)'
      inputs:
        gitHubConnection: Github/ibigbug
        assets: '$(System.ArtifactsDirectory)\drop\**\*'

  - job: ReleaseNuGet
    pool:
      vmImage: $(imageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        artifactName: nupkg

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: Nuget
